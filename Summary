알고리즘이란 문제를 해결하는 절차.
- 입력, 출력, 유한성, 명백성, 효과성을 만족.
- 분석을 통해서 좋고 나쯤 평가.
- 기초 프로그래밍과 자료 구조를 공부한 이후에 배우면 좋다.
- 논리이며, 수학이고 실질적인 개발에 적용되는 기초적인 아이디어.
- '개발'의 전체 과정에 사용
- 실제 프로그램을 개발할 때 효율적인 알고리즘을 적용함으로써 원하는 결과 도출.
- 알고리즘 문제는 종합적인 개발 역량을 평가하기에 좋은 용도.

- 평균 시간 복잡도가 O(N^2) 인 정렬
선택 정렬(Sort)
정렬만큼 알고리즘의 효율성 차이를 극명하게 보여주는 것이 없다. 
- 가장 작은 것을 선택해서 제일 앞으로 보내는 알고리즘.
많은 시간이 걸리는 것이 단점. 
->> N * (N+1) / 2 // 수행시간 O(N * N)

버블 정렬(Sort)
옆에 있는 값과 비교해서 더 작은 숫자를 앞으로 보내주는 것을 반복. 
효율성이 가장 떨어지는 알고리즘.
->> N * (N+1)/2 // 수행시간 O(N*N)  

삽입 정렬
각 숫자를 적절한 위치에 삽입하는 방법, 필요할 때만 위치를 바꾼다.
정렬이 되어있다고 가정하고 반복하기 때문에 좀 더 효율적이다. 
-> O(N*N)

퀵 정렬
분할 정복 알고리즘으로 평균 속도가 O(N*logN)이지만, 최악의 경우 O(N^2)가 걸리기도 한다.
특정한 값을 기준으로 큰 숫자와 작은 숫자를 나눈다. 
기준값이라는 피벗을 정하여서 정렬함. 

- 시간 복잡도가 O(N * logN)인 정렬

병합 정렬(Merge Sort)
일단 반으로 나누고 나중에 합쳐서 정렬하는 것.
분할 정복 방법을 채택한 알고리즘.
시간 복잡도 O(N * logN)
